//VERTEX SHADER
#version 400 core

in vec3 position;
in vec2 textureCoordinates;
in vec3 normal;

out vec2 pass_textureCoords;
out vec3 pass_normal;
out vec3 surfaceNormal;
out vec3 toLightVector[10];
out vec3 toCameraVector;
out float visibility;
out vec4 shadowCoords;
out vec3 reflectedVector;
out vec3 refractedVector;

uniform mat4 transformationMatrix;
uniform mat4 projectionMatrix;
uniform mat4 viewMatrix;
uniform vec3 lightPosition[10];
uniform int lightCount;
uniform vec3 cameraPosition;
uniform float reflectiveFactor;
uniform float refractiveFactor;
uniform float refractiveIndex;

uniform mat4 toShadowMapSpace;
uniform float shadowDistance;
uniform float shadowTransitionDistance;

uniform float useFakeLighting;

uniform float numberOfRows;
uniform vec2 offset;

uniform float fogDensity;

const float gradient = 3.0;

uniform vec4 plane;

void main(void) {

   vec4 worldPosition = transformationMatrix * vec4(position, 1.0);
   shadowCoords = toShadowMapSpace * worldPosition;
   
   gl_ClipDistance[0] = dot(worldPosition, plane);
   
   vec4 positionRelativeToCam = viewMatrix * worldPosition;
   gl_Position = projectionMatrix * positionRelativeToCam;
      
   pass_textureCoords = (textureCoordinates / numberOfRows) + offset;
   
   pass_normal = normal;
   vec3 unitNormal = normalize(normal);
   vec3 viewVector = worldPosition.xyz - cameraPosition;
   
   if(reflectiveFactor > 0.0) {	   
	   reflectedVector = reflect(viewVector, unitNormal);
   }
   
   if(refractiveFactor > 0.0) {
	   refractedVector = refract(viewVector, unitNormal, 1.0/refractiveIndex);
   }
      
   vec3 actualNormal = normal;
   if(useFakeLighting > 0.5) {
      actualNormal = vec3(0.0,1.0,0.0);
   }

   surfaceNormal = (transformationMatrix * vec4(actualNormal,0.0)).xyz;
   for(int i=0;i<lightCount;i++) {
      toLightVector[i] = lightPosition[i] - worldPosition.xyz; 
   }
   
   toCameraVector = (inverse(viewMatrix) * vec4(0.0,0.0,0.0,1.0)).xyz - worldPosition.xyz;
   
   float distance = length(positionRelativeToCam.xyz);
   visibility = exp(-pow((distance*fogDensity),gradient));
   visibility = clamp(visibility,0.0,1.0);
   
   distance = distance - (shadowDistance - shadowTransitionDistance);
   distance = distance / shadowTransitionDistance;
   shadowCoords.w = clamp(1.0 - distance, 0.0, 1.0);
   
}